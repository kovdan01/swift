/// Multi basic block VJP, pullback not accepting branch tracing enum argument.

// RUN: %target-sil-opt -sil-print-types -test-runner %s -o /dev/null 2>&1 | %FileCheck %s --check-prefixes=TRUNNER,CHECK
// RUN: %target-sil-opt -sil-print-types -autodiff-closure-specialization -sil-combine %s -o - | %FileCheck %s --check-prefixes=COMBINE,CHECK

// REQUIRES: swift_in_compiler

sil_stage canonical

import Builtin
import Swift
import SwiftShims

import _Differentiation

///////////////////
/// Test case 1 ///
///////////////////

/// This SIL corresponds to the following Swift:
///
/// struct Class: Differentiable {
///   var stored: Float
///   var optional: Float?
///
///   init(stored: Float, optional: Float?) {
///     self.stored = stored
///     self.optional = optional
///   }
///
///   @differentiable(reverse)
///   func method() -> Float {
///     let c: Class
///     do {
///       let tmp = Class(stored: 1 * stored, optional: optional)
///       let tuple = (tmp, tmp)
///       c = tuple.0
///     }
///     if let x = c.optional {
///       return x * c.stored
///     }
///     return 1 * c.stored
///   }
/// }
///
/// @differentiable(reverse)
/// func methodWrapper(_ x: Class) -> Float {
///   x.method()
/// }

struct Class : Differentiable {
  @_hasStorage var stored: Float { get set }
  @_hasStorage @_hasInitialValue var optional: Float? { get set }
  init(stored: Float, optional: Float?)
  @differentiable(reverse, wrt: self)
  func method() -> Float
  struct TangentVector : AdditiveArithmetic, Differentiable {
    @_hasStorage var stored: Float { get set }
    @_hasStorage var optional: Optional<Float>.TangentVector { get set }
    static func + (lhs: Class.TangentVector, rhs: Class.TangentVector) -> Class.TangentVector
    static func - (lhs: Class.TangentVector, rhs: Class.TangentVector) -> Class.TangentVector
    typealias TangentVector = Class.TangentVector
    @_implements(Equatable, ==(_:_:)) static func __derived_struct_equals(_ a: Class.TangentVector, _ b: Class.TangentVector) -> Bool
    init(stored: Float, optional: Optional<Float>.TangentVector)
    static var zero: Class.TangentVector { get }
  }
  mutating func move(by offset: Class.TangentVector)
}

enum _AD__$s4test5ClassV6methodSfyF_bb1__Pred__src_0_wrt_0 {
  case bb0(((Float) -> Float, (Class.TangentVector) -> (Float, Optional<Float>.TangentVector)))
}

enum _AD__$s4test5ClassV6methodSfyF_bb2__Pred__src_0_wrt_0 {
  case bb0(((Float) -> Float, (Class.TangentVector) -> (Float, Optional<Float>.TangentVector)))
}

enum _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0 {
  case bb2((predecessor: _AD__$s4test5ClassV6methodSfyF_bb2__Pred__src_0_wrt_0, (Float) -> Float))
  case bb1((predecessor: _AD__$s4test5ClassV6methodSfyF_bb1__Pred__src_0_wrt_0, (Float) -> (Float, Float)))
}

sil @$sSf16_DifferentiationE12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZSf_SftSfcfU_ : $@convention(thin) (Float, Float, Float) -> (Float, Float)
sil [transparent] [thunk] @$sS3fIegydd_TJSpSSUpSrUSUP : $@convention(thin) (Float, @guaranteed @callee_guaranteed (Float) -> (Float, Float)) -> Float
sil @$s4test5ClassV6stored8optionalACSf_SfSgtcfCTJpSSUpSr : $@convention(thin) (Class.TangentVector) -> (Float, Optional<Float>.TangentVector)
sil @$s4test5ClassV6methodSfyFTJpSpSr : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector

// pullback of methodWrapper(_:)
sil private [signature_optimized_thunk] [always_inline] @$s4test13methodWrapperySfAA5ClassVFTJpSpSr : $@convention(thin) (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) -> Class.TangentVector {
bb0(%0 : $Float, %1 : $@callee_guaranteed (Float) -> Class.TangentVector):
  %2 = apply %1(%0) : $@callee_guaranteed (Float) -> Class.TangentVector
  strong_release %1
  return %2
} // end sil function '$s4test13methodWrapperySfAA5ClassVFTJpSpSr'

// reverse-mode derivative of methodWrapper(_:)
sil hidden @$s4test13methodWrapperySfAA5ClassVFTJrSpSr : $@convention(thin) (Class) -> (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) {
bb0(%0 : $Class):
  //=========== Test callsite and closure gathering logic ===========//
  specify_test "closure_specialize_gather_call_site"
  // TRUNNER-LABEL: Specializing closures in function: $s4test13methodWrapperySfAA5ClassVFTJrSpSr
  // TRUNNER:       PartialApply call site:   %[[#]] = partial_apply [callee_guaranteed] %[[#]](%[[#A36:]]) : $@convention(thin) (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) -> Class.TangentVector
  // TRUNNER-NEXT:  Passed in closures:
  // TRUNNER-NEXT:  1.   %[[#A36]] = partial_apply [callee_guaranteed] %[[#]](%[[#]]) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER-EMPTY:

  //=========== Test specialized function signature and body ===========//
  specify_test "closure_specialize_specialized_function_signature_and_body"
  // TRUNNER-LABEL: Generated specialized function: $s4test13methodWrapperySfAA5ClassVFTJpSpSr08$s4test5D19V6methodSfyFTJpSpSr4main05_AD__edfG24F_bb3__Pred__src_0_wrt_0OTf1nc_n
  // CHECK:         sil private [signature_optimized_thunk] [always_inline] @$s4test13methodWrapperySfAA5ClassVFTJpSpSr08$s4test5D19V6methodSfyFTJpSpSr4main05_AD__edfG24F_bb3__Pred__src_0_wrt_0OTf1nc_n : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector {
  // CHECK:         bb0(%0 : $Float, %1 : $_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0):
  // CHECK:           %[[#B2:]] = function_ref @$s4test5ClassV6methodSfyFTJpSpSr : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         %[[#B3:]] = partial_apply [callee_guaranteed] %[[#B2]](%1) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         %[[#B4:]] = apply %[[#B3]](%0) : $@callee_guaranteed (Float) -> Class.TangentVector
  // COMBINE-NOT:     partial_apply
  // COMBINE:         %[[#B4:]] = apply %[[#B2]](%0, %1) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         strong_release %[[#B3]] : $@callee_guaranteed (Float) -> Class.TangentVector
  // CHECK:           return %[[#B4]]

  //=========== Test rewritten body ===========//
  specify_test "closure_specialize_rewritten_caller_body"
  // TRUNNER-LABEL: Rewritten caller body for: $s4test13methodWrapperySfAA5ClassVFTJrSpSr:
  // CHECK:         sil hidden @$s4test13methodWrapperySfAA5ClassVFTJrSpSr : $@convention(thin) (Class) -> (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) {
  // CHECK:         bb3(%[[#C33:]] : $Float, %[[#C34:]] : $_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0):
  // TRUNNER:         %[[#C35:]] = function_ref @$s4test5ClassV6methodSfyFTJpSpSr : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         %[[#C37:]] = partial_apply [callee_guaranteed] %[[#C35]](%[[#C34]]) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         %[[#C38:]] = function_ref @$s4test13methodWrapperySfAA5ClassVFTJpSpSr : $@convention(thin) (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) -> Class.TangentVector
  // COMBINE-NOT:     function_ref @$s4test5ClassV6methodSfyFTJpSpSr
  // COMBINE-NOT:     partial_apply
  // COMBINE-NOT:     function_ref @$s4test13methodWrapperySfAA5ClassVFTJpSpSr
  // CHECK:           %[[#C39:]] = function_ref @$s4test13methodWrapperySfAA5ClassVFTJpSpSr08$s4test5D19V6methodSfyFTJpSpSr4main05_AD__edfG24F_bb3__Pred__src_0_wrt_0OTf1nc_n : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // CHECK:           %[[#C40:]] = partial_apply [callee_guaranteed] %[[#C39]](%[[#C34]]) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // TRUNNER:         release_value %[[#C37]] : $@callee_guaranteed (Float) -> Class.TangentVector
  // CHECK:           %[[#C42:]] = tuple (%[[#C33]] : $Float, %[[#C40]] : $@callee_guaranteed (Float) -> Class.TangentVector)
  // CHECK:           return %[[#C42]]

  %3 = float_literal $Builtin.FPIEEE32, 0x3F800000 // 1
  %4 = struct $Float (%3)
  %5 = struct_extract %0, #Class.stored
  %6 = struct_extract %5, #Float._value
  %7 = builtin "fmul_FPIEEE32"(%3, %6) : $Builtin.FPIEEE32
  %8 = struct $Float (%7)
  // function_ref closure #1 in static Float._vjpMultiply(lhs:rhs:)
  %9 = function_ref @$sSf16_DifferentiationE12_vjpMultiply3lhs3rhsSf5value_Sf_SftSfc8pullbacktSf_SftFZSf_SftSfcfU_ : $@convention(thin) (Float, Float, Float) -> (Float, Float)
  %10 = partial_apply [callee_guaranteed] %9(%5, %4) : $@convention(thin) (Float, Float, Float) -> (Float, Float)
  // function_ref autodiff subset parameters thunk for pullback from @escaping @callee_guaranteed (@unowned Float) -> (@unowned Float, @unowned Float)
  %11 = function_ref @$sS3fIegydd_TJSpSSUpSrUSUP : $@convention(thin) (Float, @guaranteed @callee_guaranteed (Float) -> (Float, Float)) -> Float
  %12 = partial_apply [callee_guaranteed] %11(%10) : $@convention(thin) (Float, @guaranteed @callee_guaranteed (Float) -> (Float, Float)) -> Float
  %13 = struct_extract %0, #Class.optional
  // function_ref pullback of Class.init(stored:optional:)
  %26 = function_ref @$s4test5ClassV6stored8optionalACSf_SfSgtcfCTJpSSUpSr : $@convention(thin) (Class.TangentVector) -> (Float, Optional<Float>.TangentVector)
  %27 = thin_to_thick_function %26 to $@callee_guaranteed (Class.TangentVector) -> (Float, Optional<Float>.TangentVector)
  %28 = tuple (%12, %27)
  switch_enum %13, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2

bb1(%30 : $Float):
  %31 = enum $_AD__$s4test5ClassV6methodSfyF_bb1__Pred__src_0_wrt_0, #_AD__$s4test5ClassV6methodSfyF_bb1__Pred__src_0_wrt_0.bb0!enumelt, %28
  %33 = struct_extract %30, #Float._value
  %34 = builtin "fmul_FPIEEE32"(%33, %7) : $Builtin.FPIEEE32
  %35 = struct $Float (%34)
  %36 = partial_apply [callee_guaranteed] %9(%8, %30) : $@convention(thin) (Float, Float, Float) -> (Float, Float)
  %37 = tuple $(predecessor: _AD__$s4test5ClassV6methodSfyF_bb1__Pred__src_0_wrt_0, @callee_guaranteed (Float) -> (Float, Float)) (%31, %36)
  %38 = enum $_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0, #_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0.bb1!enumelt, %37
  br bb3(%35, %38)

bb2:
  %40 = enum $_AD__$s4test5ClassV6methodSfyF_bb2__Pred__src_0_wrt_0, #_AD__$s4test5ClassV6methodSfyF_bb2__Pred__src_0_wrt_0.bb0!enumelt, %28
  %41 = builtin "fmul_FPIEEE32"(%3, %7) : $Builtin.FPIEEE32
  %42 = struct $Float (%41)
  %43 = partial_apply [callee_guaranteed] %9(%8, %4) : $@convention(thin) (Float, Float, Float) -> (Float, Float)
  %44 = partial_apply [callee_guaranteed] %11(%43) : $@convention(thin) (Float, @guaranteed @callee_guaranteed (Float) -> (Float, Float)) -> Float
  %45 = tuple $(predecessor: _AD__$s4test5ClassV6methodSfyF_bb2__Pred__src_0_wrt_0, @callee_guaranteed (Float) -> Float) (%40, %44)
  %46 = enum $_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0, #_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0.bb2!enumelt, %45
  br bb3(%42, %46)

bb3(%48 : $Float, %49 : $_AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0):
  // function_ref pullback of Class.method()
  %50 = function_ref @$s4test5ClassV6methodSfyFTJpSpSr : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  %51 = partial_apply [callee_guaranteed] %50(%49) : $@convention(thin) (Float, @owned _AD__$s4test5ClassV6methodSfyF_bb3__Pred__src_0_wrt_0) -> Class.TangentVector
  // function_ref pullback of methodWrapper(_:)
  %52 = function_ref @$s4test13methodWrapperySfAA5ClassVFTJpSpSr : $@convention(thin) (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) -> Class.TangentVector
  %53 = partial_apply [callee_guaranteed] %52(%51) : $@convention(thin) (Float, @owned @callee_guaranteed (Float) -> Class.TangentVector) -> Class.TangentVector
  %54 = tuple (%48, %53)
  return %54
} // end sil function '$s4test13methodWrapperySfAA5ClassVFTJrSpSr'


///////////////////
/// Test case 2 ///
///////////////////

/// This SIL corresponds to the following Swift:
///
/// @differentiable(reverse)
/// func sum1(_ a: [Float], _ b: [Float]) -> Float {
///   let c = a + b
///   return c[0]
/// }

sil [_semantics "array.append_contentsOf"] @$sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSf_SaySfGTg5 : $@convention(method) (@owned Array<Float>, @inout Array<Float>) -> ()

sil @$sSa16_DifferentiationAA14DifferentiableRzlE15_vjpConcatenateySayxG5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_G_AJtAJc8pullbacktAD_ADtFZAKL_yAJ_AJtAjaBRzlFSf_Tg5 : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed Array<Float>, @guaranteed Array<Float>) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)

sil [transparent] [reabstraction_thunk] @$sSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVy13TangentVectorAaBPQz_GA2HIeggoo_A3HIeggoo_AaBRzlTRSf_Tg5 : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)

sil [transparent] [thunk] @$sSa16_DifferentiationAA14DifferentiableRzlE13_vjpSubscript5indexx5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaBRzlFSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView

sil [transparent] [thunk] @$s13TangentVector16_Differentiation14DifferentiablePQzSaA2bCRzlE0D4ViewVyAE_GIegno_AeHIegno_AbCRzlTRSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView

// specialized pullback of sum1(_:_:)
sil private [signature_optimized_thunk] [always_inline] @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView) {
bb0(%0 : $Float, %1 : $@callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), %2 : $@callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView):
  %3 = float_literal $Builtin.FPIEEE32, 0x0 // 0
  %4 = struct_extract %0, #Float._value
  %5 = builtin "fadd_FPIEEE32"(%3, %4) : $Builtin.FPIEEE32
  %6 = struct $Float (%5)
  %7 = alloc_stack $Float
  store %6 to %7
  %9 = apply %2(%7) : $@callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView
  strong_release %2
  dealloc_stack %7
  %13 = apply %1(%9) : $@callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  release_value %9
  strong_release %1
  return %13
}

// reverse-mode derivative of sum1(_:_:)
sil hidden @$s4test4sum1ySfSaySfG_ACtFTJrSSpSr : $@convention(thin) (@guaranteed Array<Float>, @guaranteed Array<Float>) -> (Float, @owned @callee_guaranteed (Float) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)) {
bb0(%0 : $Array<Float>, %1 : $Array<Float>):
  //=========== Test callsite and closure gathering logic ===========//
  specify_test "closure_specialize_gather_call_site"
  // TRUNNER-LABEL: Specializing closures in function: $s4test4sum1ySfSaySfG_ACtFTJrSSpSr
  // TRUNNER:       PartialApply call site:   %[[#]] = partial_apply [callee_guaranteed] %[[#]](%[[#]], %[[#]]) : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  // TRUNNER-NEXT:  Passed in closures:
  // TRUNNER-NEXT:  1.   %[[#]] = partial_apply [callee_guaranteed] %[[#]](%[[#]], %[[#]]) : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // TRUNNER-EMPTY:

  //=========== Test specialized function signature and body ===========//
  specify_test "closure_specialize_specialized_function_signature_and_body"
  // TRUNNER-LABEL: Generated specialized function: $s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n0ce1_fghi39E13_vjpSubscript5indexx5value_SaA2aBRzljkl48Vy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaV7FSf_TG5ACSiTf1nnc_n
  // CHECK:         sil private [signature_optimized_thunk] [always_inline] @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n0ce1_fghi39E13_vjpSubscript5indexx5value_SaA2aBRzljkl48Vy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaV7FSf_TG5ACSiTf1nnc_n : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned Array<Float>, Int) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView) {
  // CHECK:         bb0(%0 : $Float, %1 : $@callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), %2 : $Array<Float>, %3 : $Int):
  // CHECK:           %[[#D4:]] = function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE13_vjpSubscript5indexx5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaBRzlFSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // CHECK:           %[[#D5:]] = partial_apply [callee_guaranteed] %[[#D4]](%2, %3) : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // CHECK:           %[[#D6:]] = function_ref @$s13TangentVector16_Differentiation14DifferentiablePQzSaA2bCRzlE0D4ViewVyAE_GIegno_AeHIegno_AbCRzlTRSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         %[[#D7:]] = partial_apply [callee_guaranteed] %[[#D6]](%[[#D5]]) : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // CHECK:           store %[[#D11:]] to %[[#D12:]] : $*Float
  // TRUNNER:         %[[#D14:]] = apply %[[#D7]](%[[#D12]]) : $@callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView
  // COMBINE:         %[[#D14:]] = apply %[[#D6]](%[[#D12]], %[[#D5]]) : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         strong_release %[[#D7]] : $@callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView
  // COMBINE:         strong_release %[[#D5]] : $@callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView
  // CHECK:           %[[#D17:]] = apply %1(%[[#D14]]) : $@callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  // CHECK:           return %[[#D17]] : $(Array<Float>.DifferentiableView, Array<Float>.DifferentiableView)

  //=========== Test rewritten body ===========//
  specify_test "closure_specialize_rewritten_caller_body"
  // TRUNNER-LABEL: Rewritten caller body for:  $s4test4sum1ySfSaySfG_ACtFTJrSSpSr:
  // CHECK:         sil hidden @$s4test4sum1ySfSaySfG_ACtFTJrSSpSr : $@convention(thin) (@guaranteed Array<Float>, @guaranteed Array<Float>) -> (Float, @owned @callee_guaranteed (Float) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)) {
  // CHECK:         bb4:
  // CHECK:           %[[#E42:]] = tuple_extract %[[#]] : $(Array<Float>, @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)), 1
  // CHECK:           %[[#E43:]] = struct $Int (%[[#]] : $Builtin.Int64)

  // TRUNNER:         %[[#E44:]] = function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE13_vjpSubscript5indexx5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaBRzlFSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         %[[#E45:]] = partial_apply [callee_guaranteed] %[[#E44]](%[[#]], %[[#E43]]) : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         %[[#E46:]] = function_ref @$s13TangentVector16_Differentiation14DifferentiablePQzSaA2bCRzlE0D4ViewVyAE_GIegno_AeHIegno_AbCRzlTRSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         %[[#E47:]] = partial_apply [callee_guaranteed] %[[#E46]](%[[#E45]]) : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // TRUNNER:         %[[#]] = function_ref @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)

  // COMBINE-NOT:     function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE13_vjpSubscript5indexx5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaBRzlFSf_TG5
  // COMBINE-NOT:     partial_apply
  // COMBINE-NOT:     function_ref @$s13TangentVector16_Differentiation14DifferentiablePQzSaA2bCRzlE0D4ViewVyAE_GIegno_AeHIegno_AbCRzlTRSf_TG5
  // COMBINE-NOT:     partial_apply
  // COMBINE-NOT:     function_ref @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n

  // CHECK:           %[[#E52:]] = function_ref @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n0ce1_fghi39E13_vjpSubscript5indexx5value_SaA2aBRzljkl48Vy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaV7FSf_TG5ACSiTf1nnc_n : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned Array<Float>, Int) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  // CHECK:           %[[#E53:]] = partial_apply [callee_guaranteed] %[[#E52]](%[[#E42]], %[[#]], %[[#E43]]) : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned Array<Float>, Int) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  // CHECK:           %[[#E55:]] = tuple (%[[#]] : $Float, %[[#E53]] : $@callee_guaranteed (Float) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView))
  // CHECK:           return %[[#E55]]

  %4 = alloc_stack [var_decl] $Array<Float>
  store %0 to %4
  // function_ref specialized Array.append<A>(contentsOf:)
  %6 = function_ref @$sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSf_SaySfGTg5 : $@convention(method) (@owned Array<Float>, @inout Array<Float>) -> ()
  retain_value %0
  retain_value %1
  %9 = apply %6(%1, %4) : $@convention(method) (@owned Array<Float>, @inout Array<Float>) -> ()
  %10 = load %4
  dealloc_stack %4
  // function_ref specialized pullback #1 <A>(_:) in static Array<A>._vjpConcatenate(_:_:)
  %12 = function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE15_vjpConcatenateySayxG5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_G_AJtAJc8pullbacktAD_ADtFZAKL_yAJ_AJtAjaBRzlFSf_Tg5 : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed Array<Float>, @guaranteed Array<Float>) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  %13 = partial_apply [callee_guaranteed] %12(%0, %1) : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed Array<Float>, @guaranteed Array<Float>) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  // function_ref specialized thunk for @escaping @callee_guaranteed (@guaranteed [A.Differentiable.TangentVector]<A>.DifferentiableView) -> (@owned [A.Differentiable.TangentVector]<A>.DifferentiableView, @owned [A.Differentiable.TangentVector]<A>.DifferentiableView)
  %14 = function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVy13TangentVectorAaBPQz_GA2HIeggoo_A3HIeggoo_AaBRzlTRSf_Tg5 : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  %15 = partial_apply [callee_guaranteed] %14(%13) : $@convention(thin) (@guaranteed Array<Float>.DifferentiableView, @guaranteed @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  %16 = convert_function %15 to $@callee_guaranteed @substituted <τ_0_0, τ_0_1, τ_0_2> (@guaranteed τ_0_0) -> (@owned τ_0_1, @owned τ_0_2) for <Array<Float>.DifferentiableView, Array<Float>.DifferentiableView, Array<Float>.DifferentiableView>
  %17 = tuple (%10, %16)
  %18 = unchecked_bitwise_cast %17 to $(Array<Float>, @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView))
  %19 = tuple_extract %18, 0
  %21 = integer_literal $Builtin.Int64, 0
  %22 = struct_extract %19, #Array._buffer
  %23 = integer_literal $Builtin.Int8, 2
  %24 = integer_literal $Builtin.Int32, 0
  %25 = struct_extract %22, #_ContiguousArrayBuffer._storage
  %26 = ref_element_addr [immutable] %25, #__ContiguousArrayStorageBase.countAndCapacity
  %27 = struct_element_addr %26, #_ArrayBody._storage
  %28 = struct_element_addr %27, #_SwiftArrayBodyStorage.count
  %29 = struct_element_addr %28, #Int._value
  %30 = load %29
  %31 = integer_literal $Builtin.Word, 24
  %32 = builtin "cmp_slt_Int64"(%30, %21) : $Builtin.Int1
  %33 = integer_literal $Builtin.Int1, 0
  %34 = builtin "int_expect_Int1"(%32, %33) : $Builtin.Int1
  cond_br %34, bb1, bb2

bb1:
  unreachable

bb2:
  %53 = builtin "assumeNonNegative_Int64"(%30) : $Builtin.Int64
  %54 = builtin "cmp_slt_Int64"(%21, %53) : $Builtin.Int1
  %55 = integer_literal $Builtin.Int1, -1
  %56 = builtin "xor_Int1"(%54, %55) : $Builtin.Int1
  cond_fail %56, "Index out of range"
  %58 = builtin "int_expect_Int1"(%54, %55) : $Builtin.Int1
  cond_br %58, bb4, bb3

bb3:
  unreachable

bb4:
  %77 = tuple_extract %18, 1
  %78 = struct $Int (%21)
  %79 = ref_tail_addr [immutable] %25, $Float
  %80 = load %79
  // function_ref specialized pullback #1 <A>(_:) in Array<A>._vjpSubscript(index:)
  %81 = function_ref @$sSa16_DifferentiationAA14DifferentiableRzlE13_vjpSubscript5indexx5value_SaA2aBRzlE0B4ViewVy13TangentVectorQz_GAIc8pullbacktSi_tFAKL_yAjiaBRzlFSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  %82 = partial_apply [callee_guaranteed] %81(%19, %78) : $@convention(thin) (@in_guaranteed Float, @guaranteed Array<Float>, Int) -> @owned Array<Float>.DifferentiableView
  // function_ref specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Differentiable.TangentVector) -> (@owned [A.Differentiable.TangentVector]<A>.DifferentiableView)
  %83 = function_ref @$s13TangentVector16_Differentiation14DifferentiablePQzSaA2bCRzlE0D4ViewVyAE_GIegno_AeHIegno_AbCRzlTRSf_TG5 : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  %84 = partial_apply [callee_guaranteed] %83(%82) : $@convention(thin) (@in_guaranteed Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> @owned Array<Float>.DifferentiableView
  // function_ref specialized pullback of sum1(_:_:)
  %85 = function_ref @$s4test4sum1ySfSaySfG_ACtFTJpSSpSr055$sSfSa16_DifferentiationAA14DifferentiableRzlE0B4ViewVyd8_GIegno_D10AEIegyo_TRSfSa01_F0AE0H0RzlE0hL0VySf_GIegno_Tf1nnc_n : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  %86 = partial_apply [callee_guaranteed] %85(%77, %84) : $@convention(thin) (Float, @owned @callee_guaranteed (@guaranteed Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView), @owned @callee_guaranteed (@in_guaranteed Float) -> @owned Array<Float>.DifferentiableView) -> (@owned Array<Float>.DifferentiableView, @owned Array<Float>.DifferentiableView)
  %87 = tuple (%80, %86)
  retain_value %0
  retain_value %1
  return %87
}
